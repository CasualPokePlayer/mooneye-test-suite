name: ci
on:
  pull_request:
  push:
    branches:
    - main

jobs:
  build:
    name: Build test ROMs
    runs-on: ubuntu-latest
    env:
      WLA_DX_REPO: vhelin/wla-dx
      WLA_DX_COMMIT: eba3774e8d06f9d92f7ec1d4f39a0f3b9a92b27d
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update Ubuntu package lists
        run: sudo apt update
        if: runner.os == 'Linux'
      - name: Install Ubuntu packages
        run: sudo apt install cmake
      - name: Cache wla-dx
        id: cache
        uses: actions/cache@v1
        with:
          path: ~/wla-dx
          key: ${{ runner.os }}-${{ env.WLA_DX_COMMIT }}-wla-dx
      - name: Build wla-dx
        if: steps.cache.outputs.cache-hit != 'true'
        run: .github/scripts/install_wla-dx.sh
      - name: Build test ROMs
        run: make clean all
        env:
          WLA: ~/wla-dx/binaries/wla-gb
          WLALINK: ~/wla-dx/binaries/wlalink
      - name: Persist built test ROMs
        uses: actions/upload-artifact@v1
        with:
          name: tests
          path: build
  deploy:
    name: Deploy release ZIP
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update Ubuntu package lists
        run: sudo apt update
      - name: Install Ubuntu packages
        run: sudo apt install awscli
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Download built test ROMs
        uses: actions/download-artifact@v1
        with:
          name: tests
          path: build
      - name: Generate version identifier
        run: |
          echo MTS_VERSION="$(date +%Y%m%d-%H%M)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Prepare release
        run: .github/scripts/prepare_release.sh mts-"${MTS_VERSION}"
      - name: Upload to S3
        run: |
          aws s3 cp build/mts-"${MTS_VERSION}".zip build/mts-"${MTS_VERSION}".tar.gz build/mts-"${MTS_VERSION}".tar.xz s3://mooneye.gekkio.fi/releases/mts/mts-"${MTS_VERSION}"/
